describe("FillFromEventsDialog.controller Tests", function(){
	jQuery.sap.require("sap.secmon.ui.commons.CommonFunctions");
	jQuery.sap.require({
		modName : "sap.secmon.ui.m.valuelist.view.FillFromEventsDialog",
		type : "controller"
	});
	
	var libUnderTest;
	var view, dialog, parentView, errorHandler, bindingContext, router, uicomponent, event, namespaceSelect, component,
	model;
	afterEach(function() {
	});
	beforeEach(function() {
		 libUnderTest = sap.ui.controller("sap.secmon.ui.m.valuelist.view.FillFromEventsDialog");
		 view = jasmine.createSpyObj("view", ["setModel", "byId", "addStyleClass", "getModel", "getController"]);
		 dialog = jasmine.createSpyObj("dialog", ["setModel", "open", "close", "focus", "getModel", "getParent"]);
		 parentView = jasmine.createSpyObj("parentView", ["getId", "addDependent", "getModel", "byId", "getBindingContext", "getController"]);
		 bindingContext = jasmine.createSpyObj("bindingContext", ["getProperty", "setKey"]);
		 spyOn(libUnderTest, "getView").and.returnValue(view);
		 dialog.getParent.and.returnValue(view);
		 event = jasmine.createSpyObj("event", ["getParameter", "getSource"]);
		 namespaceSelect = jasmine.createSpyObj("namespaceSelect", ["removeItem", "bindAggregation", "getSelectedItem"]);
		 router = jasmine.createSpyObj("router", ["attachRoutePatternMatched", "navTo"]);
		 component = jasmine.createSpyObj("component", ["getCsrfToken"]);
		 spyOn(libUnderTest, "getComponent").and.returnValue(component);
		 uicomponent = jasmine.createSpyObj("uicomponent", ["getRouterFor"]);
		 model = jasmine.createSpyObj("model", ["getData"])
		 spyOn(sap.ui.core.UIComponent, "getRouterFor").and.returnValue(router);
		 sap.ui.Device.system.phone = false;
		 spyOn(sap.ui, "xmlfragment").and.returnValue(dialog);
	});
	it("openDialog with initial dialog", function() {
		var callback = function() {};
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		libUnderTest.openDialog.call(libUnderTest, '1234', parentView, callback);
		expect(libUnderTest.oValuelistId).toEqual('1234');
		expect(libUnderTest.oParentView).toEqual(parentView);
		expect(libUnderTest.fnSuccessCallback).toBe(callback);
		expect(libUnderTest.oDialog).toBe(dialog);
		expect(parentView.addDependent).toHaveBeenCalledWith(dialog);
		expect(dialog.open).toHaveBeenCalled();
	});
	it("openDialog with non initial dialog", function() {
		var callback = function() {};
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		libUnderTest.oDialog = dialog;
		libUnderTest.openDialog.call(libUnderTest, '1234', parentView, callback);
		expect(libUnderTest.oValuelistId).toEqual('1234');
		expect(libUnderTest.oParentView).toEqual(parentView);
		expect(libUnderTest.fnSuccessCallback).toBe(callback);
		expect(libUnderTest.oDialog).toBe(dialog);
		expect(parentView.addDependent).not.toHaveBeenCalledWith(dialog);
		expect(dialog.open).toHaveBeenCalled();
	});
	it("onLoadFromEvents", function() {
		spyOn(sap.m.MessageBox, "confirm");
		var controller = jasmine.createSpyObj("controller", ["isResetNeeded", "getText", "triggerReset", "getResetDetails"]);
		controller.ResetData = {resetRelevant : true};
		controller.resetAllowed = null;
		var promise = jasmine.createSpyObj("promise", ["done", "fail"]);
		promise.done.and.returnValue(promise);
		promise.fail.and.returnValue(promise);
		controller.isResetNeeded.and.returnValue(promise);
		libUnderTest.oDialog = dialog;
		libUnderTest.oParentView = parentView;
		model.getData.and.returnValue({});
		dialog.getParent.and.returnValue(parentView);
		parentView.getController.and.returnValue(controller);
		namespaceSelect.getSelectedItem.and.returnValue(bindingContext);
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		dialog.getModel.and.returnValue(model);
		libUnderTest.onLoadFromEvents.call(libUnderTest);
		expect(sap.m.MessageBox.confirm).toHaveBeenCalled();
	});
	it("onLoadFromEvents with not relevant data", function() {
		spyOn(sap.m.MessageBox, "confirm");
		
		var controller = jasmine.createSpyObj("controller", ["isResetNeeded", "getText", "triggerReset", "getResetDetails"]);
		controller.ResetData = {resetRelevant : false};
		controller.resetAllowed = null;
		var promise = jasmine.createSpyObj("promise", ["done", "fail"]);
		spyOn($, "ajax").and.returnValue(promise);
		promise.done.and.returnValue(promise);
		promise.fail.and.returnValue(promise);
		controller.isResetNeeded.and.returnValue(promise);
		libUnderTest.oDialog = dialog;
		libUnderTest.oParentView = parentView;
		model.getData.and.returnValue({});
		dialog.getParent.and.returnValue(parentView);
		parentView.getController.and.returnValue(controller);
		namespaceSelect.getSelectedItem.and.returnValue(bindingContext);
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		dialog.getModel.and.returnValue(model);
		libUnderTest.onLoadFromEvents.call(libUnderTest);
		expect(sap.m.MessageBox.confirm).not.toHaveBeenCalled();
		expect($.ajax).toHaveBeenCalled();
	});
	it("onLoadFromEvents with reset allowed data", function() {
		spyOn(sap.m.MessageBox, "confirm");
		
		var controller = jasmine.createSpyObj("controller", ["isResetNeeded", "getText", "triggerReset", "getResetDetails"]);
		controller.ResetData = {resetRelevant : true};
		controller.resetAllowed = true;
		var promise = jasmine.createSpyObj("promise", ["done", "fail"]);
		spyOn($, "ajax").and.returnValue(promise);
		promise.done.and.returnValue(promise);
		promise.fail.and.returnValue(promise);
		controller.isResetNeeded.and.returnValue(promise);
		libUnderTest.oDialog = dialog;
		libUnderTest.oParentView = parentView;
		model.getData.and.returnValue({});
		dialog.getParent.and.returnValue(parentView);
		parentView.getController.and.returnValue(controller);
		namespaceSelect.getSelectedItem.and.returnValue(bindingContext);
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		dialog.getModel.and.returnValue(model);
		libUnderTest.onLoadFromEvents.call(libUnderTest);
		expect(sap.m.MessageBox.confirm).not.toHaveBeenCalled();
		expect($.ajax).toHaveBeenCalled();
	});
	it("onLoadFromEvents check of message box and action yes", function() {
		spyOn(sap.m.MessageBox, "confirm");
		var ajax = spyOn($, "ajax");
		var controller = jasmine.createSpyObj("controller", ["isResetNeeded", "getText", "triggerReset", "getResetDetails"]);
		controller.ResetData = {resetRelevant : true};
		controller.resetAllowed = null;
		controller.getResetDetails.and.returnValue("details");
		var promise = jasmine.createSpyObj("promise", ["done", "fail"]);
		promise.done.and.returnValue(promise);
		promise.fail.and.returnValue(promise);
		$.ajax.and.returnValue(promise);
		controller.isResetNeeded.and.returnValue(promise);
		libUnderTest.oDialog = dialog;
		libUnderTest.oParentView = parentView;
		model.getData.and.returnValue({});
		dialog.getParent.and.returnValue(parentView);
		parentView.getController.and.returnValue(controller);
		namespaceSelect.getSelectedItem.and.returnValue(bindingContext);
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		dialog.getModel.and.returnValue(model);
		libUnderTest.onLoadFromEvents.call(libUnderTest);
		expect(sap.m.MessageBox.confirm).toHaveBeenCalled();
		var calls = sap.m.MessageBox.confirm.calls.argsFor(0)[1];
		expect(calls.actions).not.toBeUndefined();
		expect(calls.actions).toContain(sap.m.MessageBox.Action.YES);
		expect(calls.defaultAction).not.toBeUndefined();
		expect(calls.details).not.toBeUndefined();
		expect(calls.onClose).not.toBeUndefined();
		calls.onClose(sap.m.MessageBox.Action.YES);
		expect(controller.resetAllowed).toEqual(true);
		expect(controller.triggerReset).toHaveBeenCalled();
	});
	it("onLoadFromEvents check of message box and action no", function() {
		spyOn(sap.m.MessageBox, "confirm");
		var ajax = spyOn($, "ajax");
		var controller = jasmine.createSpyObj("controller", ["isResetNeeded", "getText", "triggerReset", "getResetDetails"]);
		controller.ResetData = {resetRelevant : true};
		controller.resetAllowed = null;
		controller.getResetDetails.and.returnValue("details");
		var promise = jasmine.createSpyObj("promise", ["done", "fail"]);
		promise.done.and.returnValue(promise);
		promise.fail.and.returnValue(promise);
		$.ajax.and.returnValue(promise);
		controller.isResetNeeded.and.returnValue(promise);
		libUnderTest.oDialog = dialog;
		libUnderTest.oParentView = parentView;
		model.getData.and.returnValue({});
		dialog.getParent.and.returnValue(parentView);
		parentView.getController.and.returnValue(controller);
		namespaceSelect.getSelectedItem.and.returnValue(bindingContext);
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		dialog.getModel.and.returnValue(model);
		libUnderTest.onLoadFromEvents.call(libUnderTest);
		expect(sap.m.MessageBox.confirm).toHaveBeenCalled();
		var calls = sap.m.MessageBox.confirm.calls.argsFor(0)[1];
		expect(calls.actions).not.toBeUndefined();
		expect(calls.actions).toContain(sap.m.MessageBox.Action.NO);
		expect(calls.defaultAction).not.toBeUndefined();
		expect(calls.details).not.toBeUndefined();
		expect(calls.onClose).not.toBeUndefined();
		calls.onClose(sap.m.MessageBox.Action.NO);
		expect(controller.resetAllowed).toEqual(false);
		expect(controller.triggerReset).not.toHaveBeenCalled();
	});
	it("onLoadFromEvents check of message box and action cancel", function() {
		spyOn(sap.m.MessageBox, "confirm");
		var ajax = spyOn($, "ajax");
		var controller = jasmine.createSpyObj("controller", ["isResetNeeded", "getText", "triggerReset", "getResetDetails"]);
		controller.ResetData = {resetRelevant : true};
		controller.resetAllowed = null;
		controller.getResetDetails.and.returnValue("details");
		var promise = jasmine.createSpyObj("promise", ["done", "fail"]);
		promise.done.and.returnValue(promise);
		promise.fail.and.returnValue(promise);
		$.ajax.and.returnValue(promise);
		controller.isResetNeeded.and.returnValue(promise);
		libUnderTest.oDialog = dialog;
		libUnderTest.oParentView = parentView;
		model.getData.and.returnValue({});
		dialog.getParent.and.returnValue(parentView);
		parentView.getController.and.returnValue(controller);
		namespaceSelect.getSelectedItem.and.returnValue(bindingContext);
		parentView.byId.and.returnValue(namespaceSelect);
		parentView.getBindingContext.and.returnValue(bindingContext);
		dialog.getModel.and.returnValue(model);
		libUnderTest.onLoadFromEvents.call(libUnderTest);
		expect(sap.m.MessageBox.confirm).toHaveBeenCalled();
		var calls = sap.m.MessageBox.confirm.calls.argsFor(0)[1];
		expect(calls.actions).not.toBeUndefined();
		expect(calls.actions).toContain(sap.m.MessageBox.Action.CANCEL);
		expect(calls.defaultAction).not.toBeUndefined();
		expect(calls.details).not.toBeUndefined();
		expect(calls.onClose).not.toBeUndefined();
		calls.onClose(sap.m.MessageBox.Action.NO);
		expect(controller.resetAllowed).toEqual(false);
		expect(controller.triggerReset).not.toHaveBeenCalled();
		expect($.ajax).toHaveBeenCalled();
	});
	
});
